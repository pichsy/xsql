plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.pichs.xsql'
    compileSdk 33

    defaultConfig {
        minSdk 21
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compileOnly 'androidx.core:core-ktx:1.9.0'
    compileOnly 'androidx.appcompat:appcompat:1.6.1'
    compileOnly 'com.google.android.material:material:1.8.0'
    compileOnly 'androidx.annotation:annotation:1.6.0'
}

task javadoc(type: Javadoc) {
    options.encoding "UTF-8"
    options.charSet 'UTF-8'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.links("http://docs.oracle.com/javase/7/docs/api/");
    options.linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    failOnError = false
}

task androidJavadocsJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
//tasks.register('makeJar', Copy) {
//    //删除存在的
////    delete 'build/libs/core.jar'
//    //设置拷贝的文件
//    from('build/intermediates/aar_main_jar/release/')
//    //打进jar包后的文件目录
//    into('build/libs/')
//    //将classes.jar放入build/libs/目录下
//    //include ,exclude参数来设置过滤
//    include('classes.jar')
//    //重命名
//    rename('classes.jar', 'core.jar')
//}
//
//makeJar.dependsOn(build)


// 此写法可忽略文件夹层级带来的影响
apply from: "${rootProject.rootDir}/maven.gradle"



